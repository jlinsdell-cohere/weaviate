// Code generated by command: go run dot512.go -out dot512_amd64.s -stubs dot_stub.go. DO NOT EDIT.

#include "textflag.h"

// func dot512(x []float32, y []float32) float32
// Requires: AVX, AVX512DQ, AVX512F, FMA3, SSE
TEXT Â·dot512(SB), NOSPLIT, $0-52
	MOVQ   x_base+0(FP), AX
	MOVQ   y_base+24(FP), CX
	MOVQ   x_len+8(FP), DX
	VXORPS Z0, Z0, Z0
	VXORPS Z1, Z1, Z1
	VXORPS Z2, Z2, Z2
	VXORPS Z3, Z3, Z3

blockloop:
	CMPQ        DX, $0x00000040
	JL          tail
	VMOVUPS     (AX), Z4
	VMOVUPS     64(AX), Z5
	VMOVUPS     128(AX), Z6
	VMOVUPS     192(AX), Z7
	VFMADD231PS (CX), Z4, Z0
	VFMADD231PS 64(CX), Z5, Z1
	VFMADD231PS 128(CX), Z6, Z2
	VFMADD231PS 192(CX), Z7, Z3
	ADDQ        $0x00000100, AX
	ADDQ        $0x00000100, CX
	SUBQ        $0x00000040, DX
	JMP         blockloop

tail:
	VXORPS X4, X4, X4

tailloop:
	CMPQ        DX, $0x00000000
	JE          reduce
	VMOVSS      (AX), X5
	VFMADD231SS (CX), X5, X4
	ADDQ        $0x00000004, AX
	ADDQ        $0x00000004, CX
	DECQ        DX
	JMP         tailloop

reduce:
	VADDPS        Z0, Z1, Z0
	VADDPS        Z2, Z3, Z2
	VADDPS        Z0, Z2, Z0
	VEXTRACTF32X4 $0x00, Z0, X1
	VEXTRACTF32X4 $0x01, Z0, X2
	VADDPS        X1, X2, X1
	VEXTRACTF32X4 $0x02, Z0, X2
	VADDPS        X1, X2, X1
	VEXTRACTF32X4 $0x03, Z0, X2
	VADDPS        X1, X2, X1
	VADDPS        X1, X4, X1
	VHADDPS       X1, X1, X1
	VHADDPS       X1, X1, X1
	MOVSS         X1, ret+48(FP)
	RET
